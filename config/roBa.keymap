#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        MB1double {
            bindings = <&mkp MB1>;
            key-positions = <33 42>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W      &kp E         &kp R     &kp T                                                             &kp Y        &kp U  &kp I      &kp O         &lt 5 P
&kp A             &kp S      &kp D         &kp F     &kp G        &kp LS(LG(NUMBER_4))                &kp RIGHT_SHIFT  &kp H        &kp J  &kp K      &kp L         &kp MINUS
&mt LEFT_SHIFT Z  &kp X      &kp C         &kp V     &lt 2 B      &kp RET                             &kp ESCAPE       &kp N        &kp M  &kp COMMA  &lt 0 PERIOD  &lt 4 SLASH
&kp TAB           &kp LCTRL  &kp LEFT_ALT  &kp LWIN  &lt 1 SPACE  &lt_to_layer_0 4 LA(LC(SPACE))      &kp BACKSPACE    &lt 2 ENTER                                  &mkp MB1
            >;
        };

        FUNCTION {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN       &kp HASH           &kp DOLLAR            &kp PERCENT                                    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LS(LG(F4))  &kp TILDE
&trans           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GLOBE      &kp F1   &kp F2     &kp F3         &kp F4        &kp F5          &kp EQUAL
&trans           &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp SQT               &kp DOUBLE_QUOTES      &trans         &kp F6   &kp F7     &kp F8         &kp F9        &kp F10         &kp F11
&trans           &trans            &trans             &trans                &trans                 &trans         &kp DEL  &trans                                                  &mkp MB2
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                              &kp RG(F3)  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp BACKSPACE      &kp LC(LG(F))        &kp G       &kp Q                 &kp UP                &kp C              &kp V
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL          &kp LS(LG(LA(RET)))  &kp E       &kp LEFT              &kp DOWN              &kp RIGHT          &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans             &trans               &trans                                                                     &mkp MB1
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans        &trans        &trans        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans        &trans        &trans        &trans             &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                       &mkp MB1
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2      &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &kp LEFT_GUI  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                    &mkp MB1
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                            &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&trans  &trans        &trans        &trans        &trans  &trans      &bt BT_SEL 0  &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader   &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans        &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
